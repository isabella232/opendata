---
- name: Ensure CKAN prerequisite packages
  apt:
    name:
      - gcc
      - libpq-dev
      - libxslt1-dev
      - python-dev
      - python-virtualenv
      - zlib1g-dev
      - libgeos-c1v5
      - supervisor
      - libapache2-mod-wsgi
      - libffi-dev
      - libxml2
      - libxml2-dev
      - unzip
      - zip
    state: present

- name: Ensure CKAN profiling packages
  apt:
    name:
      - graphviz
      - graphviz-dev
    state: present

- name: Ensure cache path
  file:
    path: "{{ ckan_cache_path }}"
    state: directory
    mode: "0755"

- name: Ensure temp directory for extensions
  file:
    path: "{{ ckan_extension_sync_path }}"
    state: directory
    mode: "0755"

- name: Ensure cache directory for pip
  file:
    path: /home/vagrant/.cache/pip/http
    state: directory
    mode: "0755"
  when: ckan_deployment_environment_id == "vagrant"

- include: pip.yml

- include: extension.yml
  with_items: "{{ ckan_extensions }}"

- name: Ensure log path exists
  file:
    path: "{{ ckan_log_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Ensure log file exists
  file:
    path: "{{ item }}"
    state: touch
    owner: "{{ ckan_www_user }}"
    group: "{{ ckan_www_group }}"
    mode: 0640
  with_items: "{{ ckan_log_files }}"


- name: Install CKAN
  pip:
    name: "git+https://github.com/ckan/ckan.git@ckan-{{ ckan_version }}#egg=ckan[requirements]"
    virtualenv: "{{ ckan_virtual_environment }}"
    extra_args: "--exists-action=s -e"

- name: Apply CKAN patches
  patch:
    src: files/patches/{{ item }}.patch
    basedir: "{{ ckan_source_path }}"
    strip: 1
  loop: "{{ ckan_patches }}"

- name: Install CKAN dev requirements
  pip:
    requirements: "{{ ckan_virtual_environment }}/src/ckan/dev-requirements.txt"
    virtualenv: "{{ ckan_virtual_environment }}"
  when: ckan_deployment_environment_id == "vagrant"

- name: Install CKAN profiling tool
  pip:
    name: "git+http://github.com/vrk-kpa/linesman#egg=linesman"
    virtualenv: "{{ ckan_virtual_environment }}"

- name: Copy override requirements
  copy:
    dest: "{{ ckan_cache_path }}/override-requirements"
    content: "{{ ckan_override_requirements | join('\n') }}"
    mode: "0644"
    owner: root
    group: root

- name: Install override requirements
  pip:
    requirements: "{{ ckan_cache_path }}/override-requirements"
    virtualenv: "{{ ckan_virtual_environment }}"

- name: Create CKAN files path
  file:
    path: "{{ item }}"
    state: directory
    mode: "0770"
    owner: "{{ ckan_www_user }}"
    group: "{{ ckan_www_group }}"
    recurse: true
  with_items:
    - "/etc/ckan/default"
    - "{{ ckan_files_path }}"
    - "{{ ckan_files_path }}/storage/uploads"
    - "{{ ckan_source_path }}/ckan/public/base/i18n"
    - "{{ ckan_resource_cache_path }}"

- name: Install python packages to support SNI in requests
  pip:
    name:
      - cryptography
      - pyOpenSSL
      - ndg-httpsclient
      - pyasn1
    virtualenv: "{{ ckan_virtual_environment }}"

- name: Install autodynatrace
  pip:
    name: "{{ ckan_dynatrace_pip_packages }}"
    virtualenv: "{{ ckan_virtual_environment }}"


- name: Copy CKAN configuration files
  copy:
    src: who.ini
    dest: "{{ ckan_who_ini }}"
    mode: "0644"
    owner: root
    group: "{{ ckan_www_group }}"

- name: Copy data structures for CKAN UI options
  copy:
    src: "{{ item }}"
    dest: "{{ ckan_files_path }}/{{ item | basename }}"
    mode: "0644"
    owner: root
    group: "{{ ckan_www_group }}"
  register: copy_ckan_ui_data
  with_fileglob: files/datastructures/*

- name: Copy SQL files
  template:
    src: "{{ item }}"
    dest: "/{{ ckan_cache_path }}/{{ item }}"
    owner: root
    group: root
    mode: "0666"
  with_items: "{{ ckan_sql_files_to_execute }}"

- import_tasks: translations.yml

- name: Install uwsgi
  pip:
    name:
      - uwsgi
    virtualenv: "{{ ckan_virtual_environment }}"

- import_tasks: configure.yml
  tags:
    - configure
    - configure_ckan

